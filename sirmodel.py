# -*- coding: utf-8 -*-
"""SIRmodel.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1spEGOEhuIrgd1HO-O9kr4aVx4PihR1t5
"""

import random
import numpy as np
import math
import matplotlib.pyplot as plt

# グローバル変数（環境変数の設定）
initial_infected_rate = 0.1
population = 500
vertical_limit = 1000
horizontal_limit = 1000
death_rate = 0.2
infection_distance = 5
infection_period = 10
move_max_distance = 100
move_min_distance = 5
move_distance_alpha = 10
test_day = 50


class Walker():
  #id;エージェントid
  #counter;特定のイベントの経過時間
  #x,y;座標
  #condition:状態　（0;健康　1;感染　2;回復　3;潜伏感染　4;死亡）
  def __init__(self, id, condition):
    self.id = id
    self.counter = 0
    self.x = random.uniform(0, vertical_limit)
    self.y = random.uniform(0, horizontal_limit)
    #0;健康　1;感染　2;回復　3;潜伏感染　4;死亡
    self.condition  = condition
    if condition == 1:
      self.counter = 1


class Agt_Touch():
  def __init__(self, walker_list, id):
    self.walker_list = walker_list
    self.id = id
    self.me = walker_list[id]
    neighbor_list = self.MakeAllAgeSetAroundOwn()
    self.me.touch_list = neighbor_list

  def MakeAllAgeSetAroundOwn(self):
    neighbor_list = []
    for agt in self.walker_list:
      if agt.id == self.me.id:
        continue
      agent_distance = math.sqrt((agt.x - self.me.x)**2 + (agt.y - self.me.y)**2)
      if agent_distance<infection_distance:
        neighbor_list.append(agt)
    return (neighbor_list)


class Agt_Infect():
  def __init__(self, walker_list, id):
    self.walker_list = walker_list
    self.id = id
    self.me = walker_list[id]
    self.run()

  def InfectAgt(self):
      if self.me.condition == 1:
        for agt in self.me.touch_list:
          if agt.condition == 0:
            agt.condition = 1
            agt.counter = 1

  def ProgressInfection(self):
      self.me.counter+=1
      if self.me.counter >= infection_period:
        if random.random()<death_rate:
          self.me.condition = 4
        else:
          self.me.condition = 2
  
  def run(self):
    self.InfectAgt()
    self.ProgressInfection()


class Agt_Move():
    def __init__(self, walker_list, id):
      self.walker_list = walker_list
      self.id = id
      self.me = walker_list[id]
      self.run()
    
    def caluclate_distace(self):
      r = np.random.uniform(0, 1)
      move_distance = (move_min_distance * (1 - r) ** (-1 / (move_distance_alpha - 1))-1) * 200
      return move_distance
      
    def move_in_direction(self,x, y, angle, distance):
      # 角度をラジアンに変換
      radians = math.radians(angle)
      # x 方向の移動量と y 方向の移動量を計算
      delta_x = distance * math.cos(radians)
      delta_y = distance * math.sin(radians)
      # 新しい座標を計算
      new_x = x + delta_x
      new_y = y + delta_y
      if new_x < 0:
        new_x=0
      elif new_x > horizontal_limit:
        new_x=horizontal_limit
      if new_y < 0:
        new_y=0
      elif new_y > vertical_limit:
        new_y=vertical_limit
      return [new_x, new_y]
    
    def run(self):
      #移動方向
      self.me.direction = random.random()*360
      move_distance = self.caluclate_distace()
      [self.me.x,self.me.y]=self.move_in_direction(self.me.x, self.me.y, self.me.direction, move_distance)


def generate_agent():
  walker_list = []
  initialinfected_id = random.sample(range(population),int(population*initial_infected_rate))
  for i in range(population):
    if i+1 in initialinfected_id:
      walker = Walker(i,1)
    else:
      walker = Walker(i,0)
    walker_list.append(walker)
    # print(id,walker.condition,walker.condition,'(',walker.x, walker.y,')')
  return walker_list


def progress_day(walker_list):
  #接触agentの特定
  for id in range(population):
      Agt_Touch(walker_list,id)

  #感染が伝播したagentの特定
  infection_id = []
  for id in range(population):
    if walker_list[id].condition==1:
      infection_id.append(id)
  for id in infection_id:
    Agt_Infect(walker_list, id)

  
  alive_id = []
  for id in range(population):
    if walker_list[id].condition!=4:
      alive_id.append(id)
  for id in alive_id:
    Agt_Move(walker_list,id)
    # print(id,walker_list[id].condition, '(',walker_list[id].x, walker_list[id].y,')')
  return walker_list


def count_agent(walker_list):
  s_num=0
  i_num=0
  r_num=0
  d_num=0
  for walker in walker_list:
    if walker.condition == 0:
      s_num += 1
    elif walker.condition == 1:
      i_num += 1
    elif walker.condition == 2:
      r_num += 1
    elif walker.condition == 4:
      d_num += 1
  print('未感染者数：',s_num)
  print('感染者数：',i_num)
  print('回復者数：',r_num)
  print('死亡者数：',d_num)
  return [s_num,i_num,r_num,d_num]


def create_fig(s_num_list,i_num_list,r_num_list,d_num_list):
  plt.plot(s_num_list, label='Susceptible')
  plt.plot(i_num_list, label='Infected')
  plt.plot(r_num_list, label='Recoverd')
  plt.plot(d_num_list, label='Dead')
  # グラフのタイトルとラベル
  plt.title('Sample Multiple Line Plot')
  plt.xlabel('Day')
  plt.ylabel('Value')
  # 凡例の表示
  plt.legend()
  # グラフを表示
  plt.show()


def main():
  walker_list = []
  s_num_list = []
  i_num_list = []
  r_num_list = []
  d_num_list = []
  print('DAY :: ',0)
  walker_list = generate_agent()
  count_list = count_agent(walker_list)
  s_num_list.append(count_list[0])
  i_num_list.append(count_list[1])
  r_num_list.append(count_list[2])
  d_num_list.append(count_list[3])

  for day in range(test_day):
    print('DAY :: ',day+1)
    walker_list = progress_day(walker_list)
    count_list = count_agent(walker_list)
    s_num_list.append(count_list[0])
    i_num_list.append(count_list[1])
    r_num_list.append(count_list[2])
    d_num_list.append(count_list[3])
  
  create_fig(s_num_list,i_num_list,r_num_list,d_num_list)
    

if __name__ == '__main__':
  main()